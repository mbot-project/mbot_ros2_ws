# Adaptive Monte Carlo Localization
# https://docs.nav2.org/configuration/packages/configuring-amcl.html#parameters
amcl:
  ros__parameters:
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    # alpha5: 0.2  # Omni models only
    base_frame_id: "base_footprint"
    introspection_mode: "disabled"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false    # only need beam skip in dynamic environments
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 3.0  # max for rplidar A1 is 12
    laser_min_range: 0.15
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: -1.0
    tf_broadcast: true
    transform_tolerance: 0.2
    update_min_a: 0.06   # minimal angle before performing a filter update
    update_min_d: 0.04   # minimal distance before performing a filter update
    sigma_hit: 0.1       # margin of error in meters
    z_hit: 0.9           # 90% chance the beam correctly hit a mapped obstacle
    z_max: 0.04
    z_rand: 0.03
    z_short: 0.03
    scan_topic: scan
    map_topic: map

local_costmap:
  local_costmap:
    ros__parameters:
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 1 # has to be integer
      height: 1
      resolution: 0.03
      update_frequency: 10.0
      publish_frequency: 5.0
      robot_radius: 0.09
      plugins: ["obstacle_layer", "inflation_layer"]

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          marking: true
          clearing: true
          obstacle_min_range: 0.15 # meter
          obstacle_max_range: 3.0
          raytrace_min_range: 0.15
          raytrace_max_range: 3.5
        max_obstacle_height: 0.35      

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.10
        cost_scaling_factor: 8.0

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      robot_radius: 0.09
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.20      # meter
        cost_scaling_factor: 3.0    # decay

      obstacle_layer: 
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          marking: true
          clearing: true
          obstacle_min_range: 0.15
          obstacle_max_range: 4.0
          raytrace_min_range: 0.15
          raytrace_max_range: 4.5
        max_obstacle_height: 0.35

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner::ThetaStarPlanner" 
      how_many_corners: 8          # Number of corners to check
      w_euc_cost: 1.0             # Euclidean cost weight
      w_traversal_cost: 2.0       # Traversal cost weight (higher = avoid obstacles more)

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    costmap_update_timeout: 0.5
    min_x_velocity_threshold: 0.005
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.01
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    progress_checker: # check if robot is stuck
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 10.0

    general_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      stateful: true
      xy_goal_tolerance: 0.10
      yaw_goal_tolerance: 0.20

    FollowPath:
      plugin: "nav2_graceful_controller::GracefulController"

      # Target selection
      min_lookahead: 0.30      # smaller = tighter tracking, riskier in clutter
      max_lookahead: 0.50      # larger = smoother, less twitchy

      # Speeds
      v_linear_min: 0.08
      v_linear_max: 0.25
      v_angular_max: 1.5
      v_angular_min_in_place: 1.0

      # Behavior around sharp turns / approach
      initial_rotation: true
      initial_rotation_tolerance: 0.75
      prefer_final_rotation: true
      slowdown_radius: 0.5
      
      # Misc
      transform_tolerance: 0.1
      max_robot_pose_search_dist: 1.0

# Behavior Tree Navigator
bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 50    # ms
    default_server_timeout: 60
    wait_for_service_timeout: 10000
    action_server_result_timeout: 120.0
    navigators: ["navigate_to_pose"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# a library of recovery actions for when the robot gets stuck
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.5
    min_rotational_vel: 0.5
    rotational_acc_lim: 2.0

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    introspection_mode: "disabled"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0