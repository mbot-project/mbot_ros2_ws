# Adaptive Monte Carlo Localization
# https://docs.nav2.org/configuration/packages/configuring-amcl.html#parameters
amcl:
  ros__parameters:
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    # alpha5: 0.2  # Omni models only
    base_frame_id: "base_footprint"
    introspection_mode: "disabled"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false    # only need beam skip in dynamic environments
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 3.0  # max for rplidar A1 is 12
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: -1.0
    sigma_hit: 0.02      # margin of error in meters
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.05   # minimal angle before performing a filter update
    update_min_d: 0.02   # minimal distance before performing a filter update
    z_hit: 0.9          # 90% chance the beam correctly hit a mapped obstacle
    z_max: 0.05
    z_rand: 0.05
    z_short: 0.05
    scan_topic: scan
    map_topic: map
    set_initial_pose: false
    always_reset_initial_pose: false
    first_map_only: false
    initial_pose:
      x: 0.0
      y: 0.0
      z: 0.0
      yaw: 0.0

# a small, moving "danger map" around the robot for immediate obstacle avoidance
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3 # in meter
      height: 3
      resolution: 0.01
      robot_radius: 0.09
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0
        inflation_radius: 0.25
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      always_send_full_costmap: True

# a large "danger map" of the entire known world for long-distance planning
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_footprint
      robot_radius: 0.09
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 8.0
        inflation_radius: 0.25
      always_send_full_costmap: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 5.0
    GridBased:
      plugin: "nav2_theta_star_planner::ThetaStarPlanner" 
      how_many_corners: 8          # Number of corners to check
      w_euc_cost: 1.0             # Euclidean cost weight
      w_traversal_cost: 5.0       # Traversal cost weight (higher = avoid obstacles more)

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    costmap_update_timeout: 0.5
    min_x_velocity_threshold: 0.005
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.01
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.05
      movement_time_allowance: 8.0
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 0.2
    FollowPath:
      plugin: "nav2_graceful_controller::GracefulController"
      
      # Motion Limits
      max_linear_vel: 0.25
      min_linear_vel: -0.2
      max_angular_vel: 1.0
      max_linear_accel: 0.2
      max_angular_accel: 2.0
      
      # Path Following
      lookahead_dist: 0.3          # Distance to look ahead on path
      lookahead_time: 1.0          # Time to look ahead
      min_lookahead_dist: 0.15     # Minimum lookahead distance
      max_lookahead_dist: 0.5      # Maximum lookahead distance
      
      # Rotation behavior
      rotation_scaling_factor: 1.2 # How aggressively to rotate towards path
      path_distance_bias: 3.0      # Preference for staying close to path
      goal_distance_bias: 0.8     # Preference for moving towards goal
      
      # Obstacle avoidance
      forward_point_distance: 0.325  # Point ahead of robot to check for collisions
    
      # Speed scaling
      speed_limit_tolerance: 0.02
      speed_scaling_factor: 0.8
      
      # Turn behavior
      allow_reversing: true
      use_rotate_to_heading: true   # Enable rotate-in-place when needed
      rotate_to_heading_angular_vel: 1.8
      max_allowed_time_to_collision_up_to_carrot: 2.0
      
      # Path smoothing
      use_interpolation: true
      
      # Costmap interaction  
      costmap_queue_size: 1
      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: false
      cost_scaling_dist: 0.3
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 6.0
      
      # Debug
      publish_transformed_plan: true

# Behavior Tree Navigator
bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 60
    wait_for_service_timeout: 10000
    action_server_result_timeout: 120.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# a library of recovery actions for when the robot gets stuck
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    assisted_teleop:
      plugin: "nav2_behaviors::AssistedTeleop"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    max_rotational_vel: 2.0
    min_rotational_vel: 0.5
    rotational_acc_lim: 4.0

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200